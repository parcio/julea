name: Tests
on: [push, pull_request]
jobs:
  dependencies:
    name: Dependencies
    runs-on: ${{ matrix.os.dist }}
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        os:
          - dist: ubuntu-20.04
            compiler: gcc
            compiler_version: 9.3.0
          - dist: ubuntu-20.04
            compiler: clang
            compiler_version: 11.0.0
          - dist: ubuntu-18.04
            compiler: gcc
            compiler_version: 7.5.0
          - dist: ubuntu-18.04
            compiler: clang
            compiler_version: 9.0.0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: dependencies
          key: ${{ matrix.os.dist }}-${{ matrix.os.compiler }}-${{ matrix.os.compiler_version }}-${{ hashFiles('scripts/spack', 'scripts/install-dependencies.sh') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        env:
          JULEA_SPACK_COMPILER: ${{ matrix.os.compiler }}@${{ matrix.os.compiler_version }}
        run: |
          ./scripts/install-dependencies.sh full
  build:
    name: Build
    needs: dependencies
    runs-on: ${{ matrix.os.dist }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os:
          - dist: ubuntu-20.04
            compiler: gcc
            compiler_version: 9.3.0
          - dist: ubuntu-20.04
            compiler: clang
            compiler_version: 11.0.0
          - dist: ubuntu-18.04
            compiler: gcc
            compiler_version: 7.5.0
          - dist: ubuntu-18.04
            compiler: clang
            compiler_version: 9.0.0
        dependencies: [system, spack]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Install dependencies
        if: matrix.dependencies == 'system'
        # We need to remove glib-network, otherwise libproxy might cause crashes.
        run: |
          sudo apt --yes purge glib-networking
          sudo apt --yes --purge autoremove
          sudo aa-remove-unknown
          sudo apt update || true
          sudo apt --yes --no-install-recommends install pkgconf libglib2.0-dev libbson-dev liblmdb-dev libsqlite3-dev libleveldb-dev libmongoc-dev libmariadb-dev librocksdb-dev libfuse-dev libopen-trace-format-dev librados-dev
          if test "${{ matrix.os.dist }}" = 'ubuntu-18.04'
          then
            sudo apt --yes --no-install-recommends install python3 python3-pip python3-setuptools python3-wheel ninja-build
            sudo pip3 install meson
          else
            sudo apt --yes --no-install-recommends install meson ninja-build
          fi
      - name: Cache dependencies
        id: cache
        if: matrix.dependencies == 'spack'
        uses: actions/cache@v2
        with:
          path: dependencies
          key: ${{ matrix.os.dist }}-${{ matrix.os.compiler }}-${{ matrix.os.compiler_version }}-${{ hashFiles('scripts/spack', 'scripts/install-dependencies.sh') }}
      - name: Check dependencies
        if: matrix.dependencies == 'spack' && steps.cache.outputs.cache-hit != 'true'
        run: |
          exit 1
      - name: Configure
        env:
          CC: ${{ matrix.os.compiler }}
        run: |
          . scripts/environment.sh
          meson setup --prefix="${GITHUB_WORKSPACE}/julea-install" --buildtype=release --werror bld
      - name: Build
        run: |
          . scripts/environment.sh
          ninja -C bld
      - name: Install
        run: |
          . scripts/environment.sh
          ninja -C bld install
  tests:
    name: Tests
    needs: dependencies
    runs-on: ${{ matrix.os.dist }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os:
          - dist: ubuntu-20.04
            compiler: gcc
            compiler_version: 9.3.0
          - dist: ubuntu-20.04
            compiler: clang
            compiler_version: 11.0.0
          - dist: ubuntu-18.04
            compiler: gcc
            compiler_version: 7.5.0
          - dist: ubuntu-18.04
            compiler: clang
            compiler_version: 9.0.0
        dependencies: [system, spack]
        julea:
          # Default
          - object: posix
            kv: lmdb
            db: sqlite
          # Object backends
          - object: gio
            kv: lmdb
            db: sqlite
          # KV backends
          - object: posix
            kv: leveldb
            db: sqlite
          - object: posix
            kv: rocksdb
            db: sqlite
          - object: posix
            kv: sqlite
            db: sqlite
          # DB backends
          - object: posix
            kv: lmdb
            db: memory
          - object: posix
            kv: lmdb
            db: mysql
            db-server: mysql
          - object: posix
            kv: lmdb
            db: mysql
            db-server: mariadb
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Install dependencies
        if: matrix.dependencies == 'system'
        # We need to remove glib-network, otherwise libproxy might cause crashes.
        run: |
          sudo apt --yes purge glib-networking
          sudo apt --yes --purge autoremove
          sudo aa-remove-unknown
          sudo apt update || true
          sudo apt --yes --no-install-recommends install pkgconf libglib2.0-dev libbson-dev liblmdb-dev libsqlite3-dev libleveldb-dev libmongoc-dev libmariadb-dev librocksdb-dev libfuse-dev libopen-trace-format-dev librados-dev
          if test "${{ matrix.os.dist }}" = 'ubuntu-18.04'
          then
            sudo apt --yes --no-install-recommends install python3 python3-pip python3-setuptools python3-wheel ninja-build
            sudo pip3 install meson
          else
            sudo apt --yes --no-install-recommends install meson ninja-build
          fi
      - name: Cache dependencies
        id: cache
        if: matrix.dependencies == 'spack'
        uses: actions/cache@v2
        with:
          path: dependencies
          key: ${{ matrix.os.dist }}-${{ matrix.os.compiler }}-${{ matrix.os.compiler_version }}-${{ hashFiles('scripts/spack', 'scripts/install-dependencies.sh') }}
      - name: Check dependencies
        if: matrix.dependencies == 'spack' && steps.cache.outputs.cache-hit != 'true'
        run: |
          exit 1
      - name: Set up MySQL
        if: matrix.julea.db == 'mysql' && matrix.julea.db-server == 'mysql'
        run: |
          sudo systemctl start mysql.service
          mysql --user=root --password=root --execute="CREATE DATABASE juleadb;"
          mysql --user=root --password=root --execute="CREATE USER 'julea'@'localhost' IDENTIFIED WITH mysql_native_password BY 'aeluj';"
          mysql --user=root --password=root --execute="GRANT ALL ON juleadb.* TO 'julea'@'localhost';"
      - name: Set up MariaDB
        if: matrix.julea.db == 'mysql' && matrix.julea.db-server == 'mariadb'
        # FIXME https://bugs.launchpad.net/ubuntu/+source/mariadb-10.1/+bug/1806263
        # Ubuntu 18.04 has MySQL 5.7, Ubuntu 20.04 has MySQL 8.0
        run: |
          if test "${{ matrix.os.dist }}" = 'ubuntu-18.04'
          then
            sudo apt --yes purge mysql-client mysql-client-5.7 mysql-server mysql-server-5.7
          else
            sudo apt --yes purge mysql-client mysql-client-8.0 mysql-server mysql-server-8.0
          fi
          sudo apt --yes --purge autoremove
          sudo aa-remove-unknown
          sudo rm --recursive --force /var/lib/mysql
          sudo apt --yes --no-install-recommends install mariadb-server
          sudo systemctl start mariadb.service
          sudo mariadb --execute="CREATE DATABASE juleadb;"
          sudo mariadb --execute="CREATE USER 'julea'@'localhost' IDENTIFIED BY 'aeluj';"
          sudo mariadb --execute="GRANT ALL ON juleadb.* TO 'julea'@'localhost';"
      - name: Configure
        env:
          CC: ${{ matrix.os.compiler }}
        # FIXME Ubuntu 18.04's GCC sanitizer seems to produce false positives regarding a stack overflow in the db client.
        run: |
          . scripts/environment.sh
          if test "${{ matrix.os.compiler }}" = 'clang'
          then
            meson setup -Db_sanitize=address,undefined -Db_lundef=false bld
          elif test "${{ matrix.os.dist }}" = 'ubuntu-18.04'
          then
            meson setup bld
          else
            meson setup -Db_sanitize=address,undefined bld
          fi
      - name: Build
        run: |
          . scripts/environment.sh
          ninja -C bld
      - name: Create configuration
        # FIXME We need to use 127.0.0.1 because localhost tries to use the socket (/tmp/mysql.sock), which does not exist.
        run: |
          . scripts/environment.sh
          JULEA_DB_COMPONENT='server'
          if test "${{ matrix.julea.db }}" = 'mysql'; then JULEA_DB_COMPONENT='client'; fi
          JULEA_DB_PATH="/tmp/julea/db/${{ matrix.julea.db }}"
          if test "${{ matrix.julea.db }}" = 'mysql'; then JULEA_DB_PATH='127.0.0.1:juleadb:julea:aeluj'; fi
          julea-config --user --object-servers="$(hostname)" --kv-servers="$(hostname)" --db-servers="$(hostname)" --object-backend="${{ matrix.julea.object }}" --object-component=server --object-path="/tmp/julea/object/${{ matrix.julea.object }}" --kv-backend="${{ matrix.julea.kv }}" --kv-component=server --kv-path="/tmp/julea/kv/${{ matrix.julea.kv }}" --db-backend="${{ matrix.julea.db }}" --db-component="${JULEA_DB_COMPONENT}" --db-path="${JULEA_DB_PATH}"
      - name: Tests
        run: |
          . scripts/environment.sh
          ./scripts/setup.sh start
          ./scripts/test.sh
          sleep 10
          ./scripts/test.sh
          ./scripts/setup.sh stop
      - name: HDF5 Tests
        if: matrix.julea.db != 'memory'
        run: |
          . scripts/environment.sh
          ./scripts/setup.sh start
          export HDF5_VOL_CONNECTOR=julea-kv
          ./scripts/test.sh -p /hdf5
          sleep 10
          ./scripts/test.sh -p /hdf5
          sleep 10
          export HDF5_VOL_CONNECTOR=julea-db
          ./scripts/test.sh -p /hdf5
          sleep 10
          ./scripts/test.sh -p /hdf5
          ./scripts/setup.sh stop
