# JULEA - Flexible storage framework
# Copyright (C) 2017-2023 Michael Kuhn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

spack_set_env ()
{
	test -n "${JULEA_SPACK_DIR}" || return 1

	export SPACK_DISABLE_LOCAL_CONFIG=true
	# FIXME maybe put into /tmp in CI
	export SPACK_USER_CACHE_PATH="${JULEA_SPACK_DIR}/cache"
}

spack_clone ()
{
	local spack_commit

	# FIXME maybe use release branch instead
	spack_commit='0d991de50af99c9938b3c376cea44cd4656f336e'

	test -n "${JULEA_SPACK_DIR}" || return 1

	if test ! -d "${JULEA_SPACK_DIR}"
	then
		git clone --config feature.manyFiles=true https://github.com/spack/spack.git "${JULEA_SPACK_DIR}"
	fi

	test -d "${JULEA_SPACK_DIR}" || return 1

	spack_set_env

	(
		cd "${JULEA_SPACK_DIR}" || return 1

		git fetch
		git reset --hard "${spack_commit}"
	)

	return 0
}

spack_init ()
{
	local spack_env

	test -n "${JULEA_SPACK_DIR}" || return 1
	test -d "${JULEA_SPACK_DIR}" || return 1

	spack_set_env

	spack_env="${JULEA_SPACK_DIR}/share/spack/setup-env.sh"

	test -f "${spack_env}" || return 1

	# shellcheck source=/dev/null
	. "${spack_env}"

	return 0
}

spack_cmd ()
{
	test -n "${JULEA_SPACK_DIR}" || return 1
	test -d "${JULEA_SPACK_DIR}" || return 1

	(
		cd "${JULEA_SPACK_DIR}" || return 1

		./bin/spack "$@"
	)
}

spack_load ()
{
	local pkg_loaded
	local spack_pkg

	pkg_loaded='YES'
	spack_pkg="$1"

	test -n "${spack_pkg}" || return 1

	spack_pkg="$(printf '%s' "${spack_pkg}" | sed 's/#/ /g')"

	spack load "${spack_pkg}" || pkg_loaded='NO'

	printf 'Dependency "%s" loaded: %s\n' "${spack_pkg}" "${pkg_loaded}"
}

spack_install ()
{
	local spack_pkg

	spack_pkg="$1"

	test -n "${spack_pkg}" || return 1

	spack_pkg="$(printf '%s' "${spack_pkg}" | sed 's/#/ /g')"

	printf 'Installing "%s"\n' "${spack_pkg}"
	# FIXME ignore errors?
	spack_cmd install "${spack_pkg}"
}

spack_get_dependencies ()
{
	local dependencies

	dependencies=''

	# Required for building JULEA
	dependencies="${dependencies} meson"
	dependencies="${dependencies} pkgconf"

	# Mandatory dependencies
	dependencies="${dependencies} glib"
	dependencies="${dependencies} libbson"
	dependencies="${dependencies} libfabric#fabrics=sockets,tcp,udp,verbs,rxd,rxm"

	# Recommended dependencies
	dependencies="${dependencies} hdf5~mpi@:1.12"
	dependencies="${dependencies} libfuse~utils"
	dependencies="${dependencies} lmdb"
	dependencies="${dependencies} sqlite"

	# Optional dependencies
	dependencies="${dependencies} leveldb"
	dependencies="${dependencies} mariadb-c-client"
	dependencies="${dependencies} mongo-c-driver"
	dependencies="${dependencies} otf"
	dependencies="${dependencies} rocksdb~static"

	if test -n "${CI}"
	then
		dependencies="${dependencies} py-gcovr"
	fi

	#dependencies="${dependencies} enzo@main"
	#dependencies="${dependencies} mpi"

	printf '%s' "${dependencies}"
}

spack_load_dependencies ()
{
	if test -z "${JULEA_SPACK_DEPENDENCIES_LOADED}"
	then
		if spack_init
		then
			for dependency in $(spack_get_dependencies)
			do
				spack_load "${dependency}"
			done

			# FIXME this could be more clever by storing the actual dependencies loaded
			JULEA_SPACK_DEPENDENCIES_LOADED=1

			export JULEA_SPACK_DEPENDENCIES_LOADED
		fi
	else
		printf 'Dependencies have already been loaded, skipping.\n' >&2
	fi
}

spack_install_dependencies ()
{
	if spack_clone
	then
		spack_cmd config --scope site add 'concretizer:reuse:false'
		# FIXME We currently need this for JULEA to find all dependencies
		spack_cmd config --scope site add 'modules:prefix_inspections:lib:[LD_LIBRARY_PATH]'
		spack_cmd config --scope site add 'modules:prefix_inspections:lib64:[LD_LIBRARY_PATH]'

		if test -n "${CI}"
		then
			spack_cmd config --scope site add 'packages:all:target:[x86_64]'
			spack_cmd compiler find
			spack_cmd compiler list

			if test -n "${JULEA_SPACK_COMPILER}"
			then
				# This should fail if Spack does not recognize the compiler
				spack_cmd compiler info "${JULEA_SPACK_COMPILER}"
			fi
		fi

		if test -n "${JULEA_SPACK_COMPILER}"
		then
			spack_cmd config --scope site add "packages:all:require: \"%${JULEA_SPACK_COMPILER}\""
		fi

		spack_cmd mark --implicit --all

		for dependency in $(spack_get_dependencies)
		do
			spack_install "${dependency}"
		done

		spack_cmd gc --yes-to-all

		if test -n "${CI}"
		then
			spack_cmd clean --downloads
			spack_cmd find
		fi
	fi
}
