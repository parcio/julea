# JULEA - Flexible storage framework
# Copyright (C) 2017-2021 Michael Kuhn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

spack_clone ()
{
	local spack_commit

	# FIXME maybe use release branch instead
	spack_commit='f9aa9290821ef835cc1d3fcf500d0607f2164848'

	test -n "${SPACK_DIR}" || return 1

	if test ! -d "${SPACK_DIR}"
	then
		git clone https://github.com/spack/spack.git "${SPACK_DIR}"
	fi

	test -d "${SPACK_DIR}" || return 1

	(
		cd "${SPACK_DIR}" || return 1

		git fetch
		git reset --hard "${spack_commit}"
	)

	return 0
}

spack_init ()
{
	local spack_env

	test -n "${SPACK_DIR}" || return 1
	test -d "${SPACK_DIR}" || return 1

	spack_env="${SPACK_DIR}/share/spack/setup-env.sh"

	test -f "${spack_env}" || return 1

	# shellcheck source=/dev/null
	. "${spack_env}"

	return 0
}

spack_cmd ()
{
	test -n "${SPACK_DIR}" || return 1
	test -d "${SPACK_DIR}" || return 1

	(
		cd "${SPACK_DIR}" || return 1

		./bin/spack "$@"
	)
}

spack_load ()
{
	local pkg_loaded
	local spack_pkg

	pkg_loaded='YES'
	spack_pkg="$1"

	test -n "${spack_pkg}" || return 1

	spack load --dependencies "${spack_pkg}" || pkg_loaded='NO'

	printf 'Dependency "%s" loaded: %s\n' "${spack_pkg}" "${pkg_loaded}"
}

spack_get_dependencies ()
{
	local dependencies
	local mode

	dependencies=''
	mode="$1"

	if test "${mode}" = 'full' -o "${mode}" = 'standard' -o "${mode}" = 'minimal'
	then
		# Required for building JULEA
		dependencies="${dependencies} meson"
		dependencies="${dependencies} pkgconfig"

		# Mandatory dependencies
		dependencies="${dependencies} glib"
		dependencies="${dependencies} libbson"
	fi

	if test "${mode}" = 'full' -o "${mode}" = 'standard'
	then
		# Optional dependencies
		dependencies="${dependencies} lmdb"
		dependencies="${dependencies} sqlite"
	fi

	if test "${mode}" = 'full'
	then
		# Optional dependencies
		dependencies="${dependencies} leveldb"
		dependencies="${dependencies} mongo-c-driver"
		dependencies="${dependencies} hdf5#@1.12:#~mpi"
		dependencies="${dependencies} mariadb-c-client"
		dependencies="${dependencies} rocksdb"

		dependencies="${dependencies} libfuse@2.9.9"
		dependencies="${dependencies} otf"

		# FIXME move to minimal
		dependencies="${dependencies} libfabric#fabrics=sockets,tcp,udp,verbs,rxd,rxm"

		#dependencies="${dependencies} mpi"
	fi

	printf '%s' "${dependencies}"
}

spack_load_dependencies ()
{
	if test -z "${JULEA_SPACK_DEPENDENCIES_LOADED}"
	then
		if spack_init
		then
			for dependency in $(spack_get_dependencies full)
			do
				dependency="$(printf '%s' "${dependency}" | sed 's/#/ /g')"
				spack_load "${dependency}"
			done

			# FIXME this could be more clever by storing the actual dependencies loaded
			JULEA_SPACK_DEPENDENCIES_LOADED=1

			export JULEA_SPACK_DEPENDENCIES_LOADED
		fi
	else
		printf 'Dependencies have already been loaded, skipping.\n' >&2
	fi
}

spack_install_dependencies ()
{
	local mode

	mode="$1"

	test -n "${mode}" || return 1

	if spack_clone
	then
		if test -n "${CI}"
		then
			spack_cmd config --scope site add 'packages:all:target:[x86_64]'
		fi

		if test -n "${JULEA_SPACK_COMPILER}"
		then
			spack_cmd config --scope site add "packages:all:compiler:[${JULEA_SPACK_COMPILER}]"
		fi

		spack_cmd mark --implicit --all

		for dependency in $(spack_get_dependencies "${mode}")
		do
			dependency="$(printf '%s' "${dependency}" | sed 's/#/ /g')"
			# FIXME ignore errors?
			spack_cmd install "${dependency}"
		done

		spack_cmd gc --yes-to-all
	fi
}
