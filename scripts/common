# JULEA - Flexible storage framework
# Copyright (C) 2017-2024 Michael Kuhn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

get_directory ()
{
	local directory

	directory="$1"

	test -n "${directory}" || return 1
	test -d "${directory}" || return 1

	printf '%s' "$(readlink --canonicalize-existing -- "${directory}")"
}

error_build_directory_not_found ()
{
	if test -n "${JULEA_ENVIRONMENT}"
	then
		return 0
	fi

	printf 'Build directory could not be found.\n' >&2
	printf '* If you have installed JULEA, please set JULEA_PREFIX to the prefix you have installed it in.\n' >&2
	printf '* If you want to use an uninstalled version, make sure the build directory is called "bld".\n' >&2

	exit 1
}

set_path ()
{
	local build_dir
	local old_path

	build_dir="$(get_directory "${SELF_DIR}/..")/bld"
	old_path="${PATH}"

	if test -n "${JULEA_PREFIX}"
	then
		PATH="${JULEA_PREFIX}/bin"
	else
		test -d "${build_dir}" || error_build_directory_not_found

		PATH="${build_dir}"
	fi

	if test -n "${old_path}"
	then
		PATH="${PATH}:${old_path}"
	fi

	export PATH
}

set_python_path()
{
	local build_dir
	local old_python_path

	build_dir="$(get_directory "${SELF_DIR}/..")/bld"
	old_python_path="${PYTHONPATH}"

	if test -n "${JULEA_PREFIX}"
	then
		PYTHONPATH="${JULEA_PREFIX}/bin"
	else
		test -d "${build_dir}" || error_build_directory_not_found

		PYTHONPATH="${build_dir}"
	fi

	if test -n "${old_python_path}"
	then
		PYTHONPATH="${PYTHONPATH}:${old_python_path}"
	fi

	export PYTHONPATH
}

set_library_path ()
{
	local build_dir
	local old_path

	build_dir="$(get_directory "${SELF_DIR}/..")/bld"
	old_path="${LD_LIBRARY_PATH}"

	if test -n "${JULEA_PREFIX}"
	then
		LD_LIBRARY_PATH="${JULEA_PREFIX}/lib64:${JULEA_PREFIX}/lib/x86_64-linux-gnu:${JULEA_PREFIX}/lib"
	else
		test -d "${build_dir}" || error_build_directory_not_found

		LD_LIBRARY_PATH="${build_dir}"
	fi

	if test -n "${old_path}"
	then
		LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${old_path}"
	fi

	export LD_LIBRARY_PATH
}

set_pkg_config_path ()
{
	local build_dir
	local old_path

	build_dir="$(get_directory "${SELF_DIR}/..")/bld"
	old_path="${PKG_CONFIG_PATH}"

	if test -n "${JULEA_PREFIX}"
	then
		PKG_CONFIG_PATH="${JULEA_PREFIX}/lib64/pkgconfig:${JULEA_PREFIX}/lib/x86_64-linux-gnu/pkgconfig:${JULEA_PREFIX}/lib/pkgconfig"
	else
		test -d "${build_dir}" || error_build_directory_not_found

		PKG_CONFIG_PATH="${build_dir}/meson-uninstalled"
	fi

	if test -n "${old_path}"
	then
		PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:${old_path}"
	fi

	export PKG_CONFIG_PATH
}

set_backend_path ()
{
	local build_dir

	build_dir="$(get_directory "${SELF_DIR}/..")/bld"

	if test -n "${JULEA_PREFIX}"
	then
		return 0
	else
		test -d "${build_dir}" || error_build_directory_not_found

		JULEA_BACKEND_PATH="${build_dir}"
	fi

	export JULEA_BACKEND_PATH
}

set_hdf_path ()
{
	local build_dir
	local old_path

	build_dir="$(get_directory "${SELF_DIR}/..")/bld"
	old_path="${HDF5_PLUGIN_PATH}"

	if test -n "${JULEA_PREFIX}"
	then
		# FIXME HDF5 seems to error out if a path it looks up does not exist
		HDF5_PLUGIN_PATH="${JULEA_PREFIX}/lib64:${JULEA_PREFIX}/lib/x86_64-linux-gnu:${JULEA_PREFIX}/lib"
	else
		test -d "${build_dir}" || error_build_directory_not_found

		HDF5_PLUGIN_PATH="${build_dir}"
	fi

	if test -n "${old_path}"
	then
		HDF5_PLUGIN_PATH="${HDF5_PLUGIN_PATH}:${old_path}"
	fi

	export HDF5_PLUGIN_PATH
}
