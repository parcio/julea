# JULEA - Flexible storage framework
# Copyright (C) 2013-2023 Michael Kuhn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

get_config ()
{
	local config_dir
	local config_name

	config_name='julea'

	if test -n "${JULEA_CONFIG}"
	then
		if test -f "${JULEA_CONFIG}"
		then
			cat "${JULEA_CONFIG}"
			return 0
		else
			config_name="${JULEA_CONFIG}"
		fi
	fi

	if test -f "${XDG_CONFIG_HOME:-${HOME}/.config}/julea/${config_name}"
	then
		cat "${XDG_CONFIG_HOME:-${HOME}/.config}/julea/${config_name}"
		return 0
	fi

	# shellcheck disable=SC2001
	for config_dir in $(echo "${XDG_CONFIG_DIRS:-/etc/xdg}" | sed 's/:/ /g')
	do
		if test -f "${config_dir}/julea/${config_name}"
		then
			cat "${config_dir}/julea/${config_name}"
			return 0
		fi
	done

	printf 'JULEA configuration could not be found.\n' >&2
	printf 'If you do not want to use the default configuration, please set JULEA_CONFIG.\n' >&2

	return 1
}

get_host ()
{
	local server
	local host

	server="$1"

	host="${server%:*}"
	host="${host%.*}"

	printf '%s' "${host}"
}

get_port ()
{
	local server
	local port

	server="$1"

	port="${server#*:}"

	if test "${port}" = "${server}"
	then
		port=''
	fi

	printf '%s' "${port}"
}

get_default_port ()
{
	local port
	local uid

	port='4711'
	uid="$(id --user)"
	uid="$((uid % 1000))"
	port="$((port + uid))"

	printf '%s' "${port}"
}

get_servers ()
{
	local server

	for server in ${SERVERS_OBJECT} ${SERVERS_KV} ${SERVERS_DB}
	do
		printf '%s\n' "${server}"
	done
}

setup_init ()
{
	HOSTNAME="$(hostname)"
	USER="$(id --name --user)"

	# FIXME make more robust
	SERVERS_OBJECT="$(get_config | grep ^object=)"
	SERVERS_KV="$(get_config | grep ^kv=)"
	SERVERS_DB="$(get_config | grep ^db=)"
	OBJECT_BACKEND="$(get_config | grep ^backend= | head --lines=1)"
	KV_BACKEND="$(get_config | grep ^backend= | tail --lines=2 | head --lines=1)"
	DB_BACKEND="$(get_config | grep ^backend= | tail --lines=1)"
	OBJECT_PATH="$(get_config | grep ^path= | head --lines=1)"
	KV_PATH="$(get_config | grep ^path= | tail --lines=2 | head --lines=1)"
	DB_PATH="$(get_config | grep ^path= | tail --lines=1)"

	SERVERS_OBJECT="${SERVERS_OBJECT#object=}"
	SERVERS_KV="${SERVERS_KV#kv=}"
	SERVERS_DB="${SERVERS_DB#db=}"
	SERVERS_OBJECT="${SERVERS_OBJECT%;}"
	SERVERS_KV="${SERVERS_KV%;}"
	SERVERS_DB="${SERVERS_DB%;}"
	# shellcheck disable=SC2001
	SERVERS_OBJECT=$(echo "${SERVERS_OBJECT}" | sed 's/;/ /g')
	# shellcheck disable=SC2001
	SERVERS_KV=$(echo "${SERVERS_KV}" | sed 's/;/ /g')
	# shellcheck disable=SC2001
	SERVERS_DB=$(echo "${SERVERS_DB}" | sed 's/;/ /g')

	OBJECT_BACKEND="${OBJECT_BACKEND#backend=}"
	KV_BACKEND="${KV_BACKEND#backend=}"
	DB_BACKEND="${DB_BACKEND#backend=}"

	OBJECT_PATH="${OBJECT_PATH#path=}"
	KV_PATH="${KV_PATH#path=}"
	DB_PATH="${DB_PATH#path=}"
}

setup_start ()
{
	local host
	local server
	local servers
	local port
	local port_option

	servers="$(get_servers | sort --unique)"

	for server in ${servers}
	do
		host="$(get_host "${server}")"
		port="$(get_port "${server}")"

		if test "${host}" = "${HOSTNAME}"
		then
			port_option=''
			test -n "${port}" && port_option="--port ${port}"

			# shellcheck disable=SC2086
			julea-server --daemon --host "${host}" ${port_option}
		fi
	done

	# Give the servers enough time to initialize properly.
	sleep 1
}

setup_stop ()
{
	local host
	local port
	local server
	local servers

	servers="$(get_servers | sort --unique)"

	for server in ${servers}
	do
		host="$(get_host "${server}")"
		port="$(get_port "${server}")"

		if test "${host}" = "${HOSTNAME}"
		then
			killall --verbose julea-server || true
			break
		fi
	done
}

setup_clean ()
{
	local backend_path
	local host
	local port
	local server

	for server in ${SERVERS_OBJECT}
	do
		host="$(get_host "${server}")"
		port="$(get_port "${server}")"
		test -n "${port}" || port="$(get_default_port)"
		backend_path="$(printf '%s' "${OBJECT_PATH}" | sed "s/{PORT}/${port}/")"

		if test "${host}" = "${HOSTNAME}"
		then
			if test -n "${backend_path}"
			then
				rm -rf "${backend_path}"
			fi
		fi
	done

	for server in ${SERVERS_KV}
	do
		host="$(get_host "${server}")"
		port="$(get_port "${server}")"
		test -n "${port}" || port="$(get_default_port)"
		backend_path="$(printf '%s' "${KV_PATH}" | sed "s/{PORT}/${port}/")"

		if test "${host}" = "${HOSTNAME}"
		then
			if test -n "${backend_path}"
			then
				rm -rf "${backend_path}"
			fi
		fi
	done

	for server in ${SERVERS_DB}
	do
		host="$(get_host "${server}")"
		port="$(get_port "${server}")"
		test -n "${port}" || port="$(get_default_port)"
		backend_path="$(printf '%s' "${DB_PATH}" | sed "s/{PORT}/${port}/")"

		if test "${host}" = "${HOSTNAME}"
		then
			if test -n "${backend_path}"
			then
				rm -rf "${backend_path}"
			fi
		fi
	done
}
